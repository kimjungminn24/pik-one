name: PicOnlySpot 배포

on:
  push:
    branches:
      - release

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./backend

      - name: Build Backend
        run: ./gradlew bootJar
        working-directory: ./backend

      - name: Build Frontend
        run: |
          cd frontend
          echo "${{ secrets.FRONTEND_ENV }}" > .env
          npm install
          npm run build

      - name: Create env.sh file
        run: |
          echo "export DB_URL='${{ secrets.DB_URL }}'" > backend/env.sh
          echo "export DB_USERNAME='${{ secrets.DB_USERNAME }}'" >> backend/env.sh
          echo "export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'" >> backend/env.sh
          echo "export NAVER_CLIENT_ID='${{ secrets.NAVER_CLIENT_ID }}'" >> backend/env.sh
          echo "export NAVER_CLIENT_SECRET='${{ secrets.NAVER_CLIENT_SECRET }}'" >> backend/env.sh
          echo "export NAVER_REDIRECT_URI='${{ secrets.NAVER_REDIRECT_URI }}'" >> backend/env.sh
          echo "export NAVER_AUTHORIZATION_GRANT_TYPE='${{ secrets.NAVER_AUTHORIZATION_GRANT_TYPE }}'" >> backend/env.sh
          echo "export NAVER_AUTHORIZATION_URL='${{ secrets.NAVER_AUTHORIZATION_URL }}'" >> backend/env.sh
          echo "export NAVER_TOKEN_URL='${{ secrets.NAVER_TOKEN_URL }}'" >> backend/env.sh
          echo "export NAVER_USER_INFO_URL='${{ secrets.NAVER_USER_INFO_URL }}'" >> backend/env.sh
          echo "export NAVER_USER_NAME_ATTRIBUTE='${{ secrets.NAVER_USER_NAME_ATTRIBUTE }}'" >> backend/env.sh
          echo "export JWT_SECRET_KEY='${{ secrets.JWT_SECRET_KEY }}'" >> backend/env.sh
          echo "export JWT_EXPIRATION_TIME='${{ secrets.JWT_EXPIRATION_TIME }}'" >> backend/env.sh
          echo "export FRONTEND_URL='${{ secrets.FRONTEND_URL }}'" >> backend/env.sh
          echo "export ISSUE_API_KEY='${{ secrets.ISSUE_API_KEY }}'" >> backend/env.sh
          echo "export ISSUE_API_OWNER='${{ secrets.ISSUE_API_OWNER }}'" >> backend/env.sh
          echo "export ISSUE_API_REPO='${{ secrets.ISSUE_API_REPO }}'" >> backend/env.sh
          echo "export ISSUE_API_NUMBER='${{ secrets.ISSUE_API_NUMBER }}'" >> backend/env.sh
          echo "export KAKAO_CLIENT_ID='${{ secrets.KAKAO_CLIENT_ID }}'" >> backend/env.sh
          echo "export KAKAO_CLIENT_SECRET='${{ secrets.KAKAO_CLIENT_SECRET }}'" >> backend/env.sh
          echo "export KAKAO_REDIRECT_URI='${{ secrets.KAKAO_REDIRECT_URI }}'" >> backend/env.sh
          echo "export KAKAO_AUTHORIZATION_GRANT_TYPE='${{ secrets.KAKAO_AUTHORIZATION_GRANT_TYPE }}'" >> backend/env.sh
          echo "export KAKAO_AUTHORIZATION_URL='${{ secrets.KAKAO_AUTHORIZATION_URL }}'" >> backend/env.sh
          echo "export KAKAO_TOKEN_URL='${{ secrets.KAKAO_TOKEN_URL }}'" >> backend/env.sh
          echo "export KAKAO_USER_INFO_URL='${{ secrets.KAKAO_USER_INFO_URL }}'" >> backend/env.sh
          echo "export KAKAO_USER_NAME_ATTRIBUTE='${{ secrets.KAKAO_USER_NAME_ATTRIBUTE }}'" >> backend/env.sh
          echo "export GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}'" >> backend/env.sh
          echo "export GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}'" >> backend/env.sh
          echo "export GOOGLE_REDIRECT_URI='${{ secrets.GOOGLE_REDIRECT_URI }}'" >> backend/env.sh
          echo "export GOOGLE_AUTHORIZATION_URL='${{ secrets.GOOGLE_AUTHORIZATION_URL }}'" >> backend/env.sh
          echo "export GOOGLE_TOKEN_URL='${{ secrets.GOOGLE_TOKEN_URL }}'" >> backend/env.sh
          echo "export GOOGLE_USER_INFO_URL='${{ secrets.GOOGLE_USER_INFO_URL }}'" >> backend/env.sh
          echo "export GOOGLE_USER_NAME_ATTRIBUTE='${{ secrets.GOOGLE_USER_NAME_ATTRIBUTE }}'" >> backend/env.sh

      - name: Copy frontend build to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "frontend/build/*"
          target: "/tmp/frontend-build"

      - name: Copy backend JAR to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "backend/build/libs/backend-0.0.1-SNAPSHOT.jar"
          target: "/home/ubuntu/app/pik-one/backend"
          strip_components: 3

      - name: Copy env.sh to EC2 (separately)
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "backend/env.sh"
          target: "/home/ubuntu/app/pik-one/backend"
          strip_components: 1

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "[환경 변수 로드]"
            source /home/ubuntu/app/pik-one/backend/env.sh
            rm /home/ubuntu/app/pik-one/backend/env.sh

            echo "[기존 백엔드 종료]"
            if lsof -i:8080 -t >/dev/null; then
              kill -9 $(lsof -i:8080 -t)
            fi

            echo "[백엔드 실행]"
            cd /home/ubuntu/app/pik-one/backend || exit 1
            nohup java -jar backend-0.0.1-SNAPSHOT.jar > log.txt 2>&1 < /dev/null &

            echo "[프론트엔드 배포]"
            sudo rm -rf /var/www/html/*
            sudo cp -r /tmp/frontend-build/* /var/www/html/
            sudo rm -rf /tmp/frontend-build

            echo "[백엔드 로그 출력]"
            tail -n 20 log.txt
